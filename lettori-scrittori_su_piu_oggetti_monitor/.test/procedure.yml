rules:
  - id: writing-inside-monitor
    patterns:
      - pattern: |
          void scrivi_stazione(...){
            pthread_mutex_lock(...);
            ...
            pthread_mutex_unlock(...);
          }
      - pattern-not: |
          void scrivi_stazione(...){
            pthread_mutex_lock(...);
            ...
            pthread_mutex_unlock(...);
            ...
            pthread_mutex_lock(...);
            ...
            pthread_mutex_unlock(...);
          }

    message: In questo esercizio si raccomanda di utilizzare l'algoritmo con starvation di entrambi (sia lettori sia scrittori).
             Per realizzare questo algoritmo, è necessario che la scrittura sia effettuata uscendo dal monitor
             (ossia, liberando temporaneamente la sezione critica del monitor, e riacquisendola subito dopo la scrittura).
             Questo consente ad eventuali altri scrittori di porsi in attesa su una variabile condition, e di potergli dare la
             priorità quando lo scrittore deve risvegliare un altro thread.
    languages:
      - c
    severity: ERROR

  - id: reading-inside-monitor
    patterns:
      - pattern: |
          int leggi_stazione(...){
            pthread_mutex_lock(...);
            ...
            pthread_mutex_unlock(...);
          }
      - pattern-not: |
          int leggi_stazione(...){
            pthread_mutex_lock(...);
            ...
            pthread_mutex_unlock(...);
            ...
            pthread_mutex_lock(...);
            ...
            pthread_mutex_unlock(...);
          }

    message: È necessario che la lettura sia effettuata uscendo dal monitor (ossia, liberando temporaneamente la sezione critica del
             monitor, e riacquisendola subito dopo la lettura). Questo consente a più lettori di poter leggere contemporaneamente il buffer.
    languages:
      - c
    severity: ERROR

  - id: missing-signal-readers
    patterns:
      - pattern: |
          int leggi_stazione(...){
          ...
          }
      - pattern-not: |
          int leggi_stazione(...){
            ...
            pthread_cond_signal(...);
            ...
            pthread_mutex_unlock(...);
            ...
            pthread_mutex_lock(...);
          }
      - pattern-not: |
          int scrivi_stazione(...){
            ...
            pthread_cond_broadcast(...);
          }

    message: Quando termina una scrittura, è necessario risvegliare *tutti* gli eventuali thread lettori in attesa.
             Questo comportamento si può ottenere in due modi: 1) prima della lettura, il lettore chiama cond_signal() per risvegliare
             un ulteriore lettore; oppure 2) lo scrittore risveglia simultaneamente tutti i lettori sospesi chiamando cond_broadcast()
    languages:
      - c
    severity: ERROR

  - id: missing-loop
    pattern-either:
      - patterns:
          - pattern: |
              void scrivi_stazione(...){
                ...
              }
          - pattern-not-inside: ... while(...){...}
      - patterns:
          - pattern: |
              int leggi_stazione(...){
                ...
              }
          - pattern-not-inside: ... while(...){...}

    message: La condizione va controllata all'interno di un ciclo "while".
             Nei programmi basati su libreria PThreads, il monitor è sempre di tipo signal-and-continue.
    languages:
      - c
    severity: ERROR

